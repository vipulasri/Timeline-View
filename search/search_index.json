{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Timeline View","text":"<p>Timeline View is a simple and highly customizable Android library for creating visually appealing timeline-based UIs. Perfect for:</p> <ul> <li>Order tracking</li> <li>Delivery status</li> <li>Step progress indicators</li> <li>Historical events</li> <li>Process flows</li> </ul> <code>Vertical</code> <code>Horizontal</code> <code>Dashed</code> <code>Order Tracking</code>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports Android Views and Jetpack Compose</li> <li>Customizable markers and lines</li> <li>Vertical and horizontal orientations</li> <li>Dashed/Solid line styles</li> <li>Easy to integrate with existing layouts</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2015-2025 Vipul Asri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"timelineview/overview/","title":"Timeline View","text":"<p>A Timeline View library for Android that helps you display chronological events in a vertical or horizontal timeline format.</p>"},{"location":"timelineview/overview/#download","title":"Download","text":"<p>Add the dependency to your app's <code>build.gradle</code>:</p> <pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"com.github.vipulasri:timelineview:${latest_version}\")\n}\n</code></pre>"},{"location":"timelineview/overview/#basic-usage","title":"Basic Usage","text":"<pre><code>&lt;com.github.vipulasri.timelineview.TimelineView\n    android:id=\"@+id/timeline\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"match_parent\"\n    app:markerSize=\"20dp\"\n    app:lineWidth=\"2dp\"\n    app:startLineColor=\"@color/colorPrimary\"\n    app:endLineColor=\"@color/colorPrimary\"/&gt;\n</code></pre>"},{"location":"timelineview/overview/#customization","title":"Customization","text":"Attribute Default Value Description <code>app:marker</code> Green Oval Drawable Sets marker drawable <code>app:markerSize</code> <code>25dp</code> Sets marker size <code>app:markerInCenter</code> <code>true</code> Sets the marker in center of line if <code>true</code> <code>app:markerPaddingLeft</code> <code>0dp</code> Sets the marker left padding (horizontal orientation only) <code>app:markerPaddingTop</code> <code>0dp</code> Sets the marker top padding (vertical orientation only) <code>app:markerPaddingRight</code> <code>0dp</code> Sets the marker right padding (horizontal orientation only) <code>app:markerPaddingBottom</code> <code>0dp</code> Sets the marker bottom padding (vertical orientation only) <code>app:startLineColor</code> Dark Grey Sets start line color <code>app:endLineColor</code> Dark Grey Sets end line color <code>app:lineWidth</code> <code>2dp</code> Sets line width <code>app:lineOrientation</code> <code>vertical</code> Sets orientation (<code>horizontal</code> or <code>vertical</code>) <code>app:linePadding</code> <code>0dp</code> Sets line padding around marker <code>app:lineStyle</code> <code>normal</code> Sets style to both start and end (<code>normal</code> or <code>dashed</code>) <code>app:startLineStyle</code> <code>normal</code> Sets style to start line (<code>normal</code> or <code>dashed</code>) <code>app:endLineStyle</code> <code>normal</code> Sets style to end line (<code>normal</code> or <code>dashed</code>) <code>app:lineStyleDashGap</code> <code>4dp</code> Sets line dash gap <code>app:lineStyleDashLength</code> <code>8dp</code> Sets line dash length"},{"location":"timelineview/recyclerview/","title":"Timeline View in RecyclerView","text":"<p>Timeline View can be easily integrated with RecyclerView by following these steps:</p>"},{"location":"timelineview/recyclerview/#adapter","title":"Adapter","text":"<p>The adapter needs to override <code>getItemViewType</code> to provide the correct timeline type:</p> <pre><code>class TimelineAdapter(\n    private val items: List&lt;TimelineItem&gt;\n) : RecyclerView.Adapter&lt;TimelineViewHolder&gt;() {\n\n    override fun getItemViewType(position: Int): Int {\n        return TimelineView.getTimeLineViewType(position, itemCount)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TimelineViewHolder {\n        val view = LayoutInflater.from(parent.context)\n            .inflate(R.layout.item_timeline, parent, false)\n        return TimelineViewHolder(view, viewType)\n    }\n\n    override fun onBindViewHolder(holder: TimelineViewHolder, position: Int) {\n        holder.bind(items[position])\n    }\n\n    override fun getItemCount() = items.size\n}\n</code></pre> <p>Important</p> <p>Make sure to pass the <code>viewType</code> from <code>onCreateViewHolder</code> to the ViewHolder constructor. This is crucial for proper timeline initialization.</p>"},{"location":"timelineview/recyclerview/#viewholder","title":"ViewHolder","text":"<p>The ViewHolder needs to initialize the timeline with the correct view type:</p> <pre><code>class TimelineViewHolder(\n    itemView: View, \n    viewType: Int // Required for timeline initialization\n) : RecyclerView.ViewHolder(itemView) {\n\n    private val timelineView: TimelineView = itemView.findViewById&lt;TimelineView&gt;(R.id.timeline).apply {\n        initLine(viewType) // Initialize timeline with view type\n    }\n\n    fun bind(item: TimelineItem) {\n        // Bind your data here\n    }\n}\n</code></pre>"},{"location":"timelineview/recyclerview/#layout","title":"Layout","text":"<pre><code>&lt;LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"horizontal\"&gt;\n\n    &lt;com.github.vipulasri.timelineview.TimelineView\n        android:id=\"@+id/timeline\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        app:markerSize=\"20dp\"\n        app:lineWidth=\"2dp\"\n        app:lineStyle=\"normal\"/&gt;\n\n    &lt;!-- Your content layout here --&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>"},{"location":"timelineview-compose/overview/","title":"Timeline View Compose","text":"<p>A Jetpack Compose implementation of Timeline View for creating visually appealing timelines.</p>"},{"location":"timelineview-compose/overview/#download","title":"Download","text":"<p>Add the code below to your root build.gradle file (not your module-level build.gradle file):</p> <pre><code>allprojects {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <p>Then, add the dependency to your app's <code>build.gradle</code>:</p> <pre><code>dependencies {\n    implementation(\"com.github.vipulasri:timelineview-compose:${latest_version}\")\n}\n</code></pre>"},{"location":"timelineview-compose/overview/#line-types","title":"Line Types","text":"<p>Timeline supports different line types based on the item's position:</p> <ul> <li><code>LineType.START</code>: First item in the timeline</li> <li><code>LineType.MIDDLE</code>: Items between first and last</li> <li><code>LineType.END</code>: Last item in the timeline</li> <li><code>LineType.SINGLE</code>: Single item timeline</li> </ul>"},{"location":"timelineview-compose/overview/#line-styles","title":"Line Styles","text":"<p>Timeline supports two line styles:</p>"},{"location":"timelineview-compose/overview/#solid-line","title":"Solid Line","text":"<pre><code>LineStyle.solid(\n    color = Color.Blue,\n    width = 2.dp\n)\n</code></pre>"},{"location":"timelineview-compose/overview/#dashed-line","title":"Dashed Line","text":"<pre><code>LineStyle.dashed(\n    color = Color.Blue,\n    width = 2.dp,\n    dashLength = 8.dp,\n    dashGap = 4.dp\n)\n</code></pre> <p>Best Practice</p> <p>When using Timeline in a list, make sure to properly handle the line types based on item position for a consistent appearance.</p> <p>Marker Customization</p> <p>The marker composable gives you complete freedom to design your timeline markers. You can use icons, shapes, images, or any other composable.</p>"},{"location":"timelineview-compose/usage/","title":"Timeline usage in Compose","text":""},{"location":"timelineview-compose/usage/#simple","title":"Simple","text":"<p><pre><code>Timeline(\n    modifier = Modifier.height(100.dp),\n    lineType = LineType.MIDDLE,\n    lineStyle = LineStyle.dashed(\n        color = MaterialTheme.colorScheme.primary,\n        width = 2.dp\n    ),\n    marker = {\n        Box(\n            modifier = Modifier\n                .size(24.dp)\n                .background(\n                    color = MaterialTheme.colorScheme.primary,\n                    CircleShape\n                )\n        )\n    }\n)\n</code></pre> Output</p> <p></p>"},{"location":"timelineview-compose/usage/#with-content","title":"With Content","text":"<pre><code>Row(\n    modifier = Modifier.height(IntrinsicSize.Min)\n        .padding(start = 16.dp),\n    verticalAlignment = Alignment.CenterVertically\n) {\n    Timeline(\n        modifier = Modifier.fillMaxHeight(),\n        lineType = LineType.MIDDLE,\n        lineStyle = LineStyle.solid(\n            color = MaterialTheme.colorScheme.primary,\n            width = 2.dp\n        ),\n        marker = {\n            Icon(\n                imageVector = Icons.Default.Check,\n                contentDescription = null,\n                modifier = Modifier\n                    .size(24.dp)\n                    .background(\n                        color = MaterialTheme.colorScheme.primary,\n                        shape = CircleShape\n                    )\n                    .padding(4.dp),\n                tint = Color.White\n            )\n        }\n    )\n\n    Card(\n        Modifier.padding(16.dp).weight(1f)\n    ) {\n        Column(\n            modifier = Modifier.padding(16.dp)\n        ) {\n            Text(\n                text = \"Order Placed\",\n                style = MaterialTheme.typography.titleMedium\n            )\n            Text(\n                text = \"Your order has been placed\",\n                style = MaterialTheme.typography.bodyMedium\n            )\n        }\n    }\n}\n</code></pre> <p>Output</p> <p></p>"},{"location":"timelineview-compose/usage/#lazycolumn","title":"LazyColumn","text":"<pre><code>LazyColumn {\n    items(timelineItems.size) { index -&gt;\n        Row(\n            modifier = Modifier.padding(16.dp),\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Timeline(\n                lineType = getLineType(index, timelineItems.size),\n                lineStyle = LineStyle.dashed(\n                    color = MaterialTheme.colorScheme.primary,\n                    width = 2.dp,\n                    dashLength = 8.dp,\n                    dashGap = 4.dp\n                ),\n                marker = {\n                    // Your marker composable\n                }\n            )\n\n            // Your content composable\n        }\n    }\n}\n</code></pre> <p>Output</p> <p></p>"},{"location":"timelineview-compose/usage/#custom-markers-with-inconsistent-size","title":"Custom Markers with Inconsistent Size","text":"<pre><code>Column(Modifier.padding(horizontal = 16.dp)) {\n    val totalItems = 4\n    repeat(totalItems) { position -&gt;\n\n        var modifier = Modifier\n            .height(100.dp)\n\n        if (position != 1) {\n            modifier = modifier.then(Modifier.padding(horizontal = 13.dp))\n        }\n\n        Timeline(\n            modifier = modifier,\n            lineType = getLineType(position, totalItems),\n            lineStyle = when (position) {\n                0 -&gt; {\n                    LineStyle.dashed(\n                        color = Color.Gray,\n                        width = 3.dp\n                    )\n                }\n\n                1 -&gt; {\n                    LineStyle(\n                        startLine = DashedLine(\n                            color = Color.Gray,\n                            width = 3.dp\n                        ),\n                        endLine = SolidLine(\n                            color = MaterialTheme.colorScheme.primary,\n                            width = 3.dp\n                        ),\n                    )\n                }\n\n                else -&gt; {\n                    LineStyle.solid(\n                        color = MaterialTheme.colorScheme.primary,\n                        width = 3.dp\n                    )\n                }\n            }\n        ) {\n            // Custom marker examples\n            when (position) {\n                0 -&gt; Icon(\n                    imageVector = Icons.Default.Star,\n                    contentDescription = null,\n                    tint = MaterialTheme.colorScheme.primary,\n                    modifier = Modifier.size(24.dp)\n                )\n\n                1 -&gt; Box(\n                    modifier = Modifier\n                        .size(50.dp)\n                        .background(\n                            MaterialTheme.colorScheme.primary,\n                            RoundedCornerShape(4.dp)\n                        )\n                )\n\n                2 -&gt; Box(\n                    Modifier\n                        .size(24.dp)\n                        .background(MaterialTheme.colorScheme.primary, CircleShape)\n                ) {\n                    Text(\n                        modifier = Modifier.align(Alignment.Center),\n                        text = \"3\",\n                        color = Color.White,\n                        textAlign = TextAlign.Center\n                    )\n                }\n\n                else -&gt; {\n                    Box(\n                        modifier = Modifier\n                            .size(24.dp)\n                            .background(MaterialTheme.colorScheme.primary, CircleShape)\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Output</p> <p></p>"}]}